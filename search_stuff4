Add-Type -AssemblyName System.Windows.Forms

# Display a folder browser dialog to select the root path
$folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog
$folderBrowser.Description = "Select the root directory to search"
$folderBrowser.ShowNewFolderButton = $false

# Show the folder browser dialog and capture the selected path
$dialogResult = $folderBrowser.ShowDialog()

if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
    $rootPath = $folderBrowser.SelectedPath

    # Prompt user to enter the time frame and unit
    $timeFrame = Read-Host "Enter the time frame (e.g., 30 for 30 days)"
    $timeUnit = Read-Host "Enter the time unit (days/weeks/months/years)"

    # Define keywords to search for (e.g., passwords, credentials, API keys)
    $keywords = "password", "credential", "apikey", "token", "secret"

    # Specify the output file path for saving the results
    $outputFilePath = "C:\path\to\results.txt"

    # Clear existing content in the output file
    Clear-Content -Path $outputFilePath

    # Calculate the date based on the user-defined time frame and unit
    $startDate = (Get-Date).AddDays(-$timeFrame)
    switch ($timeUnit) {
        "days" { $startDate = (Get-Date).AddDays(-$timeFrame) }
        "weeks" { $startDate = (Get-Date).AddDays(-($timeFrame * 7)) }
        "months" { $startDate = (Get-Date).AddMonths(-$timeFrame) }
        "years" { $startDate = (Get-Date).AddYears(-$timeFrame) }
    }

    # Function to search for keywords in a file
    function SearchFile {
        param($filePath)
        try {
            $fileContent = Get-Content -Path $filePath -ReadCount 0
            foreach ($keyword in $keywords) {
                $matchingLines = $fileContent | Select-String -Pattern $keyword -SimpleMatch
                foreach ($line in $matchingLines) {
                    # Append file path and matched line to the output file
                    $result = "Found '$keyword' in file: $filePath`n$($line.Line)"
                    Add-Content -Path $outputFilePath -Value $result
                }
            }
        } catch [System.IO.IOException] {
            # Handle "network path was not found" error by skipping the file
            Write-Host "IOException occurred: $($_.Exception.Message). Skipping file: $filePath"
        }
    }

    # Recursively search through all files in the specified directory
    Get-ChildItem -Path $rootPath -Recurse -File | ForEach-Object -Parallel {
        if ($_.LastWriteTime -ge $startDate) {
            SearchFile $_.FullName
        }
    }
}
