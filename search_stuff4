Add-Type -AssemblyName System.Windows.Forms

# Display a folder browser dialog to select the root path
$folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog
$folderBrowser.Description = "Select the root directory to search"
$folderBrowser.ShowNewFolderButton = $false

# Show the folder browser dialog and capture the selected path
$dialogResult = $folderBrowser.ShowDialog()

if ($dialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
    $rootPath = $folderBrowser.SelectedPath

    # Prompt user to enter the time frame and unit
    $timeFrame = Read-Host "Enter the time frame (e.g., 30 for 30 days)"
    $timeUnit = Read-Host "Enter the time unit (days/weeks/months/years)"

    # Define keywords to search for (e.g., passwords, credentials, API keys)
    $keywords = "password", "credential", "apikey", "token", "secret"

    # Define custom regex patterns for additional searches
    $customRegexPatterns = @(
        @{ Keyword = "custom_pattern1"; Pattern = "(?i)custom_pattern1:\s*(.*)" },
        @{ Keyword = "custom_pattern2"; Pattern = "(?i)custom_pattern2:\s*(.*)" }
    )

    # Specify the output file path for saving the results
    $outputFilePath = "C:\path\to\results.txt"

    # Clear existing content in the output file
    Clear-Content -Path $outputFilePath

    # Calculate the date based on the user-defined time frame and unit
    $startDate = (Get-Date).AddDays(-$timeFrame)
    switch ($timeUnit) {
        "days" { $startDate = (Get-Date).AddDays(-$timeFrame) }
        "weeks" { $startDate = (Get-Date).AddDays(-($timeFrame * 7)) }
        "months" { $startDate = (Get-Date).AddMonths(-$timeFrame) }
        "years" { $startDate = (Get-Date).AddYears(-$timeFrame) }
    }

    # Recursively search through all files in the specified directory
    Get-ChildItem -Path $rootPath -Recurse -File | ForEach-Object {
        $filePath = $_.FullName

        # Get the last modified date of the file
        $lastModified = $_.LastWriteTime

        # Skip files modified before the start date
        if ($lastModified -lt $startDate) {
            Write-Host "Skipping file modified before the specified time frame: $filePath"
            continue
        }

        # Output current directory being searched
        Write-Host "Searching in: $filePath"

        # Check file extension to skip unsupported file types
        $supportedExtensions = ".pdf", ".docx", ".xlsx", ".pptx", ".txt", ".csv", ".json", ".xml", ".html", ".xlsx", ".doc", ".ini", ".yaml", ".toml", ".properties", ".md"
        if ($supportedExtensions -notcontains $_.Extension) {
            Write-Host "Skipping unsupported file: $filePath"
            continue
        }

        # Try to read file content and search for lines containing any of the keywords
        try {
            $fileContent = Get-Content -Path $filePath -ErrorAction Stop
            foreach ($keyword in $keywords) {
                $matchingLines = $fileContent | Select-String -Pattern $keyword -SimpleMatch
                foreach ($line in $matchingLines) {
                    # Append file path and matched line to the output file
                    $result = "Found '$keyword' in file: $filePath`n$($line.Line)"
                    Write-Host $result

                    # Append result to the output file
                    Add-Content -Path $outputFilePath -Value $result
                }
            }

            # Search for additional patterns using custom regex
            foreach ($customRegex in $customRegexPatterns) {
                $matchingLines = $fileContent | Select-String -Pattern $customRegex.Pattern -SimpleMatch
                foreach ($line in $matchingLines) {
                    # Append file path and matched line to the output file
                    $result = "Found '$($customRegex.Keyword)' in file: $filePath`n$($line.Line)"
                    Write-Host $result

                    # Append result to the output file
                    Add-Content -Path $outputFilePath -Value $result
                }
            }
        } catch [System.IO.IOException] {
            # Handle "network path was not found" error by skipping the file
            Write-Host "IOException occurred: $($_.Exception.Message). Skipping file: $filePath"
        }
    }
}



####regex####

rules:
  - regex: -----BEGIN [A-Z]+ PRIVATE KEY( BLOCK)?-----
    category: crypto_key
    description: private key

  - regex: EAACEdEose0cBA[0-9A-Za-z]+
    category: token
    description: fb access token

  - regex: '[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com'
    category: token
    description: google token

  - regex: AKIA[0-9A-Z]{16}
    category: token
    description: amazon token

  - regex: '[0-9a-fA-F]{7}\.[0-9a-fA-F]{32}'
    category: token
    description: instagram token

  - regex: '^(sha)?[1-9][0-9]+-[0-9a-zA-Z]{40}'
    category: token
    description: twitter access token

  - regex: 'key-[0-9a-zA-Z]{32}'
    category: token
    description: Mailgun API key

  - regex: '[0-9a-f]{32}-us[0-9]{1,2}'
    category: token
    description: MailChimp API key

  - regex: sshpass|password|pwd|passwd|pass[\W_]
    category: password
    description: password keywords
